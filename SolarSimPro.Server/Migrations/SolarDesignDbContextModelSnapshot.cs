// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SolarSimPro.Server.Data;

#nullable disable

namespace SolarSimPro.Server.Migrations
{
    [DbContext(typeof(SolarDesignDbContext))]
    partial class SolarDesignDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("SolarSimPro.Server.Models.FinancialAnalysis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("AnnualSavingsYear1")
                        .HasColumnType("REAL");

                    b.Property<double>("LCOE")
                        .HasColumnType("REAL");

                    b.Property<double>("NPV")
                        .HasColumnType("REAL");

                    b.Property<double>("ROI")
                        .HasColumnType("REAL");

                    b.Property<double>("SimplePaybackPeriod")
                        .HasColumnType("REAL");

                    b.Property<Guid>("SimulationResultId")
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalSystemCost")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("SimulationResultId")
                        .IsUnique();

                    b.ToTable("FinancialAnalyses");
                });

            modelBuilder.Entity("SolarSimPro.Server.Models.Inverter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("InverterModelId")
                        .HasColumnType("TEXT");

                    b.Property<int>("ModulesPerString")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("SolarSystemId")
                        .HasColumnType("TEXT");

                    b.Property<int>("StringsPerMppt")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("InverterModelId");

                    b.HasIndex("SolarSystemId");

                    b.ToTable("Inverters");
                });

            modelBuilder.Entity("SolarSimPro.Server.Models.InverterModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double>("MaxEfficiency")
                        .HasColumnType("REAL");

                    b.Property<double>("MaxInputCurrent")
                        .HasColumnType("REAL");

                    b.Property<double>("MaxInputVoltage")
                        .HasColumnType("REAL");

                    b.Property<double>("MinInputVoltage")
                        .HasColumnType("REAL");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double>("NominalPowerAc")
                        .HasColumnType("REAL");

                    b.Property<int>("NumberOfMpptInputs")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("InverterModels");
                });

            modelBuilder.Entity("SolarSimPro.Server.Models.LossBreakdown", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("ACOhmicLoss")
                        .HasColumnType("REAL");

                    b.Property<double>("IAMLoss")
                        .HasColumnType("REAL");

                    b.Property<double>("InverterEfficiencyLoss")
                        .HasColumnType("REAL");

                    b.Property<double>("IrradianceLoss")
                        .HasColumnType("REAL");

                    b.Property<double>("MismatchLoss")
                        .HasColumnType("REAL");

                    b.Property<double>("ModuleQualityLoss")
                        .HasColumnType("REAL");

                    b.Property<double>("OhmicWiringLoss")
                        .HasColumnType("REAL");

                    b.Property<Guid>("SimulationResultId")
                        .HasColumnType("TEXT");

                    b.Property<double>("SoilingLoss")
                        .HasColumnType("REAL");

                    b.Property<double>("SystemUnavailabilityLoss")
                        .HasColumnType("REAL");

                    b.Property<double>("TemperatureLoss")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("SimulationResultId")
                        .IsUnique();

                    b.ToTable("LossBreakdowns");
                });

            modelBuilder.Entity("SolarSimPro.Server.Models.MonthlyResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("DiffHor")
                        .HasColumnType("REAL");

                    b.Property<double>("EArray")
                        .HasColumnType("REAL");

                    b.Property<double>("EGrid")
                        .HasColumnType("REAL");

                    b.Property<double>("GlobEff")
                        .HasColumnType("REAL");

                    b.Property<double>("GlobHor")
                        .HasColumnType("REAL");

                    b.Property<double>("GlobInc")
                        .HasColumnType("REAL");

                    b.Property<int>("Month")
                        .HasColumnType("INTEGER");

                    b.Property<double>("PR")
                        .HasColumnType("REAL");

                    b.Property<Guid>("SimulationResultId")
                        .HasColumnType("TEXT");

                    b.Property<double>("Temperature")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("SimulationResultId");

                    b.ToTable("MonthlyResults");
                });

            modelBuilder.Entity("SolarSimPro.Server.Models.PanelModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("Efficiency")
                        .HasColumnType("REAL");

                    b.Property<double>("Height")
                        .HasColumnType("REAL");

                    b.Property<double>("ImppStc")
                        .HasColumnType("REAL");

                    b.Property<double>("IscStc")
                        .HasColumnType("REAL");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double>("NominalPowerWp")
                        .HasColumnType("REAL");

                    b.Property<double>("TempCoeffIsc")
                        .HasColumnType("REAL");

                    b.Property<double>("TempCoeffPmax")
                        .HasColumnType("REAL");

                    b.Property<double>("TempCoeffVoc")
                        .HasColumnType("REAL");

                    b.Property<double>("Thickness")
                        .HasColumnType("REAL");

                    b.Property<double>("VmppStc")
                        .HasColumnType("REAL");

                    b.Property<double>("VocStc")
                        .HasColumnType("REAL");

                    b.Property<double>("Weight")
                        .HasColumnType("REAL");

                    b.Property<double>("Width")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("PanelModels");
                });

            modelBuilder.Entity("SolarSimPro.Server.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("Albedo")
                        .HasColumnType("REAL");

                    b.Property<double>("Altitude")
                        .HasColumnType("REAL");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("SolarSimPro.Server.Models.SimulationResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("AnnualProduction")
                        .HasColumnType("REAL");

                    b.Property<double>("PerformanceRatio")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("SimulationDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SolarSystemId")
                        .HasColumnType("TEXT");

                    b.Property<double>("SpecificProduction")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("SolarSystemId");

                    b.ToTable("SimulationResults");
                });

            modelBuilder.Entity("SolarSystem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("Azimuth")
                        .HasColumnType("REAL");

                    b.Property<Guid?>("InverterModelId")
                        .HasColumnType("TEXT");

                    b.Property<double>("ModuleArea")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfModules")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("PanelModelId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("TEXT");

                    b.Property<double>("Tilt")
                        .HasColumnType("REAL");

                    b.Property<double>("TotalCapacityKWp")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("InverterModelId");

                    b.HasIndex("PanelModelId");

                    b.HasIndex("ProjectId");

                    b.ToTable("SolarSystems");
                });

            modelBuilder.Entity("SolarSimPro.Server.Models.FinancialAnalysis", b =>
                {
                    b.HasOne("SolarSimPro.Server.Models.SimulationResult", "SimulationResult")
                        .WithOne("FinancialAnalysis")
                        .HasForeignKey("SolarSimPro.Server.Models.FinancialAnalysis", "SimulationResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SimulationResult");
                });

            modelBuilder.Entity("SolarSimPro.Server.Models.Inverter", b =>
                {
                    b.HasOne("SolarSimPro.Server.Models.InverterModel", "InverterModel")
                        .WithMany()
                        .HasForeignKey("InverterModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolarSystem", "SolarSystem")
                        .WithMany("Inverters")
                        .HasForeignKey("SolarSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InverterModel");

                    b.Navigation("SolarSystem");
                });

            modelBuilder.Entity("SolarSimPro.Server.Models.LossBreakdown", b =>
                {
                    b.HasOne("SolarSimPro.Server.Models.SimulationResult", "SimulationResult")
                        .WithOne("Losses")
                        .HasForeignKey("SolarSimPro.Server.Models.LossBreakdown", "SimulationResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SimulationResult");
                });

            modelBuilder.Entity("SolarSimPro.Server.Models.MonthlyResult", b =>
                {
                    b.HasOne("SolarSimPro.Server.Models.SimulationResult", "SimulationResult")
                        .WithMany("MonthlyResults")
                        .HasForeignKey("SimulationResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SimulationResult");
                });

            modelBuilder.Entity("SolarSimPro.Server.Models.SimulationResult", b =>
                {
                    b.HasOne("SolarSystem", "SolarSystem")
                        .WithMany("SimulationResults")
                        .HasForeignKey("SolarSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SolarSystem");
                });

            modelBuilder.Entity("SolarSystem", b =>
                {
                    b.HasOne("SolarSimPro.Server.Models.InverterModel", "InverterModel")
                        .WithMany()
                        .HasForeignKey("InverterModelId");

                    b.HasOne("SolarSimPro.Server.Models.PanelModel", "PanelModel")
                        .WithMany()
                        .HasForeignKey("PanelModelId");

                    b.HasOne("SolarSimPro.Server.Models.Project", "Project")
                        .WithMany("Systems")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InverterModel");

                    b.Navigation("PanelModel");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SolarSimPro.Server.Models.Project", b =>
                {
                    b.Navigation("Systems");
                });

            modelBuilder.Entity("SolarSimPro.Server.Models.SimulationResult", b =>
                {
                    b.Navigation("FinancialAnalysis")
                        .IsRequired();

                    b.Navigation("Losses")
                        .IsRequired();

                    b.Navigation("MonthlyResults");
                });

            modelBuilder.Entity("SolarSystem", b =>
                {
                    b.Navigation("Inverters");

                    b.Navigation("SimulationResults");
                });
#pragma warning restore 612, 618
        }
    }
}
